class Solution {
    public int maxProduct(int[] nums) {
        int maxProduct = Integer.MIN_VALUE;
        int lastZero = 0;
        boolean zero = false;
        for(int i = 0; i < nums.length; i++){
            if(nums[i] == 0){
                if(lastZero == i){
                    maxProduct = Math.max(0, maxProduct);
                    //System.out.println(maxProduct);
                }
                else {
                maxProduct = Math.max(maxProduct, maxProdNoZero(nums, lastZero, i-1));
                }
                lastZero = i + 1;
                zero = true;
            }
            else if(i == nums.length - 1){
                maxProduct = Math.max(maxProduct, maxProdNoZero(nums, lastZero, i));
            }
        }
        if(zero)
            return Math.max(maxProduct,0);
        return maxProduct;
    }
        
    public int maxProdNoZero(int[] nums, int startIndex, int endIndex){
        int prod = 1;
        //calculate product
        boolean one = false;
        for(int i = startIndex; i <= endIndex; i++){
            prod*=nums[i];
            if(nums[i] == 1)
                one = true;
        }
        //check if product < 0
        if(prod > 0)
            return prod;
        int prodLeft = 1;
        int prodRight = 1;
        
        //if product < 0, calculate whether to trim left or right side
        for(int i = startIndex; i <= endIndex; i++){
            prodLeft *= nums[i];
            if(nums[i] < 0)
                break;
        }
        for(int i = endIndex; i >= startIndex; i--)
        {
            prodRight *= nums[i];
            if(nums[i] < 0)
                break;
        }
        System.out.println(prodLeft + " " + prodRight);
        int toDivide = Math.max(prodLeft, prodRight);
        if(one && toDivide == prod)
            return 1;
        else if(toDivide == prod)
            return toDivide;
        return prod/toDivide;
        // if(prodLeft > prodRight)
        //     return prod/prodLeft;
        // return prod/prodRight;
    }
}
